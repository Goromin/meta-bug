plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

group = 'com.meta-bug'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}

task buildDocker(type: Exec) {

    workingDir "$projectDir/docker-dir/postgres-meta-bug"

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        // No docker for Kris
    } else {
        commandLine 'bash', '-c', 'docker build -t postgres-meta-bug .'
    }
}

build.dependsOn buildDocker

/*
task cleanDocker(type: Exec) {
	metaBugImage = "postgres-meta-bug"

	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		// No docker for Kris
	} else {
		commandLine 'bash', '-c', 'docker rm "$(docker ps -a -q)"'
		commandLine 'bash', '-c', 'docker rmi $metaBugImage'
	}
}

task myPrebuildTask(type: Exec) {
	workingDir = "$projectDir"
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		// No docker for Kris
	} else {
		commandLine 'bash', '-c', 'docker '
	}
}
*/
